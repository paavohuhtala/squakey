
// Inspired by:
// - The Pest book
//  https://pest.rs/book/examples/json.html
// - This Peg grammar for Java 1.7
//  https://github.com/pointlander/peg/blob/0d618c19cd3c991caccb57451d418b16a6ea2595/grammars/java/java_1_7.peg

space = _{ " " | "\t" }
silent_newline = _{ "\r\n" | "\n" }
newline = ${ ("\r\n" | "\n") }

WHITESPACE = _{ " " | "\t" | silent_newline }

line_comment_content = ${ (!newline ~ ANY)* }
line_comment = ${ "//" ~ line_comment_content ~ (silent_newline | EOI) }

block_comment_content = ${ (!"*/" ~ ANY)* }
block_comment = ${"/*" ~ block_comment_content ~ "*/" ~ (space*  ~ newline?) }

COMMENT = ${ block_comment | line_comment }

type_entity = { "entity" }
type_float = { "float" }
type_vector = { "vector" }
type_string = { "string" }
type_void = { "void" }

builtin_type = { type_entity | type_float | type_vector | type_string | type_void }

identifier_1st = _{ ('a' .. 'z') | ('A' .. 'Z') | "_" }
identifier_rest = _{ '0' .. '9' | identifier_1st }
identifier = @{ identifier_1st ~ identifier_rest* }

string_literal = ${ "\"" ~ string_content ~ "\"" }
string_content = @{ string_char* }
string_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
integer_literal = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
number_literal = @{
    "-"?
    ~ integer_literal
    ~ ("." ~ ASCII_DIGIT*)?
// TODO: Looks like FTEQCC doesn't support scientific notation?
//    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

vector_literal = { "'" ~ number_literal ~ number_literal ~ number_literal ~ "'" }

// https://github.com/segeljakt/ast/blob/master/examples/calc.pest

infix = _{ add | sub | mul | div | and | bitwise_and | or | bitwise_or | bitwise_xor | cross_product | equals | not_equals | less_than_or_equals | less_than | greater_than_or_equals | greater_than }
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
and = { "&&" }
or = { "||" }
bitwise_and = { "&" }
bitwise_or = { "|" }
bitwise_xor = { "^" }
equals = { "==" }
not_equals = { "!=" }
less_than = { "<" }
less_than_or_equals = { "<=" }
greater_than = { ">" }
greater_than_or_equals = { ">=" }
cross_product = { "><" }

prefix = _{ neg | not }
neg = { "-" }
not = { "!" }

prefixed = { prefix ~ unary_expression }

expression = { unary_expression ~ (infix ~ unary_expression)* }

call_arguments = { "(" ~ (expression ~ ( "," ~ expression )*)? ~ ")" }
identifier_call = { identifier ~ call_arguments } 

unary_expression = { primary ~ selector* }
selector = { "." ~ identifier ~ call_arguments? }

frame_reference = ${ "$" ~ identifier }

primary = _{
  "(" ~ expression ~ ")" |
  string_literal |
  number_literal |
  vector_literal |
  identifier_call |
  identifier |
  frame_reference |
  prefixed
}

argument = { any_type ~ identifier }
argument_list = {("(" ~ ")") | "(" ~ argument ~ ( "," ~ argument )* ~ ")" }
function_type = { builtin_type ~ argument_list }
field_reference_type = { "." ~ any_type }
pointer_asterisk = { "*" }
any_type = { (function_type | field_reference_type | builtin_type) ~ pointer_asterisk? }

end_of_declaration = @{ ";"? ~ newline? }
end_of_statement = @{ ";" ~ newline? }

field_declaration = !{ "." ~ any_type ~ identifier ~ ( "," ~ identifier )* ~ end_of_declaration }

builtin_reference = ${ "#" ~ integer_literal }
state_function = { "[" ~ frame_reference ~ "," ~ identifier ~ "]" ~ block }
initializer = {
  // The = can apparently be omitted
  block |
  ( "=" ~ ( builtin_reference | state_function | block | expression ) )
}

binding_const = { "const" }
binding_var = { "var" }
binding_nosave = { "nosave" }
binding_modifier = _{ binding_const | binding_var | binding_nosave }
binding_modifiers = { binding_modifier* }

binding = !{
  "local"? ~
  binding_modifiers ~
  any_type ~
  identifier ~
  initializer? ~
  ("," ~ identifier ~ initializer?)* ~
  end_of_declaration
}

assignment = !{ expression ~ "=" ~ expression ~ end_of_statement }
expression_statement = !{ expression ~ end_of_statement }
return_statement = !{ "return" ~ expression? ~ end_of_statement }
break_statement = !{ "break" ~ end_of_statement }
continue_statement = !{ "continue" ~ end_of_statement }

switch_default_case = { "default" ~ ":" }
switch_case = !{ (("case" ~ expression ~ ":") | switch_default_case) ~ silent_newline? }
switch_case_group = ${ (WHITESPACE* ~ switch_case)+ ~ (newline | statement)* }
// This is a hack to prevent the parser from consuming too many newlines
switch_stament_end = @{ "}" ~ space* ~ silent_newline? }
switch_statement = !{
  "switch" ~  "(" ~ expression ~ ")" ~ "{" ~ switch_case_group* ~ switch_stament_end
}

if_body = ${ (block ~ silent_newline?) | statement }
if_invert = ${ "!" | "not" }
if_condition = { if_invert? ~ "(" ~ expression ~ ")" }
if_case = !{ "if" ~ if_condition ~ if_body }
if_statement = ${ if_case ~ (WHITESPACE* ~ "else" ~ WHITESPACE* ~ if_case)* ~ (WHITESPACE* ~ "else" ~ (WHITESPACE | COMMENT)* ~ if_body)? }

while_body = _{ (block ~ silent_newline?) | statement }
while_statement = !{ "while" ~ "(" ~ expression ~ ")" ~ while_body }

statement = {
  WHITESPACE* ~ (
    line_comment |
    if_statement |
    while_statement |
    switch_statement |
    return_statement |
    break_statement |
    continue_statement |
    assignment |
    declaration |
    expression_statement
  ) ~ space* ~ COMMENT*
}

block = ${ "{" ~ silent_newline? ~ (newline | statement)* ~ (WHITESPACE+ | COMMENT)* ~ "}" }

declaration = ${
  (space* ~ newline) |
  (space* ~ line_comment) |
  (space* ~ block_comment) |
  (WHITESPACE* ~
    (
      field_declaration |
      binding
    ) ~
    (space* ~ COMMENT?)
  )
}

modelgen_command_name = ${ "cd" | "origin" | "base" | "flags" | "scale" | "skin" | "frame" | "modelname" | "framesave" | "framerestore" | "framevalue" | "flush" }
modelgen_command_content = ${ "$" ~ modelgen_command_name ~ " " ~ (!newline ~ ANY)* }
modelgen_command = ${ modelgen_command_content ~ (silent_newline | EOI) }

program = _{ (declaration | modelgen_command)* }
main = ${ SOI ~ program ~ EOI }
